"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1460],{28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var i=n(96540);const r={},d=i.createContext(r);function t(e){const s=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(d.Provider,{value:s},e.children)}},82015:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api-specification/design-api-intro","title":"Design Document: Basic API Initialization","description":"Description: This document provides the complete design of a basic Express.js API, including class/module purposes, data fields, methods, pre/post conditions, parameters, and exceptions.","source":"@site/docs/api-specification/design-api-intro.md","sourceDirName":"api-specification","slug":"/api-specification/design-api-intro","permalink":"/project-002-aac-api/docs/api-specification/design-api-intro","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-002-aac-api/edit/main/documentation/docs/api-specification/design-api-intro.md","tags":[],"version":"current","lastUpdatedBy":"TheBigMo","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"CalculatorModel.java","permalink":"/project-002-aac-api/docs/api-specification/calculator-model-generated"},"next":{"title":"Test Procedures","permalink":"/project-002-aac-api/docs/category/test-procedures"}}');var r=n(74848),d=n(28453);const t={},l="Design Document: Basic API Initialization",c={},o=[{value:"Overview",id:"overview",level:2},{value:"Purpose",id:"purpose",level:3},{value:"Modules and Fields",id:"modules-and-fields",level:2},{value:"Middleware",id:"middleware",level:2},{value:"<strong>JSON Parser</strong>",id:"json-parser",level:3},{value:"Server Initialization",id:"server-initialization",level:2},{value:"Routes and Methods",id:"routes-and-methods",level:2},{value:"<strong>GET /test</strong>",id:"get-test",level:3},{value:"<strong>POST /test/</strong>",id:"post-test",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Summary Table",id:"summary-table",level:2},{value:"Notes",id:"notes",level:2}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"design-document-basic-api-initialization",children:"Design Document: Basic API Initialization"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"})," This document provides the complete design of a basic Express.js API, including class/module purposes, data fields, methods, pre/post conditions, parameters, and exceptions."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(s.p,{children:["This software initializes a simple RESTful API using ",(0,r.jsx)(s.strong,{children:"Express.js"}),". It sets up middleware for JSON parsing, defines test endpoints for GET and POST requests, and runs a local server on port ",(0,r.jsx)(s.strong,{children:"8080"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Demonstrate API initialization using Express.js."}),"\n",(0,r.jsx)(s.li,{children:"Provide sample endpoints for testing GET and POST methods."}),"\n",(0,r.jsx)(s.li,{children:"Serve as a foundation for expanding into a full REST API."}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"modules-and-fields",children:"Modules and Fields"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Field"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Purpose"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"express"})}),(0,r.jsx)(s.td,{children:"Module"}),(0,r.jsx)(s.td,{children:"Imports the Express framework for creating and managing the web server."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"app"})}),(0,r.jsx)(s.td,{children:"Object"}),(0,r.jsx)(s.td,{children:"Represents the Express application instance; used to define middleware and routes."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"PORT"})}),(0,r.jsx)(s.td,{children:"Number"}),(0,r.jsxs)(s.td,{children:["Port number on which the API server listens (set to ",(0,r.jsx)(s.code,{children:"8080"}),")."]})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"middleware",children:"Middleware"}),"\n",(0,r.jsx)(s.h3,{id:"json-parser",children:(0,r.jsx)(s.strong,{children:"JSON Parser"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"app.use(express.json());\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Enables parsing of incoming JSON request bodies, making them available via ",(0,r.jsx)(s.code,{children:"req.body"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Pre-condition:"})," Requests must contain valid JSON."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Post-condition:"})," JSON data is accessible to subsequent route handlers."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Exceptions:"})," If JSON is malformed, Express automatically returns ",(0,r.jsx)(s.code,{children:"400 Bad Request"}),"."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"server-initialization",children:"Server Initialization"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"app.listen(PORT, () => console.log(`it's alive on http://localhost:${PORT}`));\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Starts the Express.js server on the defined port and logs a confirmation message."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"PORT"})," ",(0,r.jsx)(s.em,{children:"(Number)"})," \u2014 Server port."]}),"\n",(0,r.jsx)(s.li,{children:"Callback \u2014 Logs confirmation to console."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Pre-condition:"})," No conflicting process occupies the port."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Post-condition:"})," API becomes accessible at ",(0,r.jsx)(s.code,{children:"http://localhost:8080"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Return Value:"})," None."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Exceptions:"})," If the port is already in use, the system throws ",(0,r.jsx)(s.code,{children:"EADDRINUSE"}),"."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"routes-and-methods",children:"Routes and Methods"}),"\n",(0,r.jsx)(s.h3,{id:"get-test",children:(0,r.jsx)(s.strong,{children:"GET /test"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"app.get('/test', (req, res) => {\n    res.status(200).send({\n        name: 'Test1',\n        status: 'test'\n    });\n});\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Confirms API availability."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Method:"})," GET\n",(0,r.jsx)(s.strong,{children:"Endpoint:"})," ",(0,r.jsx)(s.code,{children:"/test"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Pre-condition:"})," Server must be running."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Post-condition:"})," Client receives success response."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Response:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "name": "Test1",\n  "status": "test"\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Exceptions:"})," None expected."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"post-test",children:(0,r.jsxs)(s.strong,{children:["POST /test/",":id"]})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"app.post('/test/:id', (req, res) => {\n    const { id } = req.params;\n    const { info } = req.body;\n\n    if (!info) {\n        res.status(418).send({ message: 'No info!' });\n    }\n\n    res.send({\n        name: `Test message with info: ${info} and ID: ${id}`,\n    });\n});\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Handles POST requests by echoing provided parameters."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Method:"})," POST\n",(0,r.jsx)(s.strong,{children:"Endpoint:"})," ",(0,r.jsx)(s.code,{children:"/test/:id"})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"id"})," ",(0,r.jsx)(s.em,{children:"(String)"})," \u2014 Extracted from URL."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"info"})," ",(0,r.jsx)(s.em,{children:"(String)"})," \u2014 Sent in request body."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"req"})," ",(0,r.jsx)(s.em,{children:"(Request Object)"})," \u2014 HTTP request object."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"res"})," ",(0,r.jsx)(s.em,{children:"(Response Object)"})," \u2014 HTTP response object."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Pre-condition:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Request body must include valid JSON."}),"\n",(0,r.jsxs)(s.li,{children:["Must contain field ",(0,r.jsx)(s.code,{children:"info"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Post-condition:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Responds with JSON confirmation if ",(0,r.jsx)(s.code,{children:"info"})," is provided."]}),"\n",(0,r.jsx)(s.li,{children:"Sends error message if missing."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Success Response:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "name": "Test message with info: <info> and ID: <id>"\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Error Response:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "message": "No info!"\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Exceptions:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"418 (I'm a teapot):"})," Missing ",(0,r.jsx)(s.code,{children:"info"})," field."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"400 (Bad Request):"})," Malformed JSON."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Express automatically handles JSON parsing errors."}),"\n",(0,r.jsx)(s.li,{children:"Custom responses provide user-friendly messages."}),"\n",(0,r.jsx)(s.li,{children:"Future improvement: Add centralized error-handling middleware."}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"summary-table",children:"Summary Table"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Method"}),(0,r.jsx)(s.th,{children:"Endpoint"}),(0,r.jsx)(s.th,{children:"Description"}),(0,r.jsx)(s.th,{children:"Success Response"}),(0,r.jsx)(s.th,{children:"Error Response"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"GET"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"/test"})}),(0,r.jsx)(s.td,{children:"Verifies API status"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:'{ name: "Test1", status: "test" }'})}),(0,r.jsx)(s.td,{children:"N/A"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"POST"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"/test/:id"})}),(0,r.jsx)(s.td,{children:"Echoes provided data"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:'{ name: "Test message with info: <info> and ID: <id>" }'})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:'{ message: "No info!" }'})," (418)"]})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Followed instructions from: ",(0,r.jsx)(s.a,{href:"https://www.youtube.com/watch?v=-MTSQjw5DrM",children:"https://www.youtube.com/watch?v=-MTSQjw5DrM"})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Ensure ",(0,r.jsx)(s.code,{children:"app.listen()"})," remains in the code; removing it will prevent the API from running."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Run using:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"node .\n"})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Verify at: ",(0,r.jsx)(s.a,{href:"http://localhost:8080",children:"http://localhost:8080"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"End of Document"})})]})}function h(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);