"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6024],{27167:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"requirements/features-and-requirements","title":"Features and Requirements","description":"Functional Requirements","source":"@site/docs/requirements/features-and-requirements.md","sourceDirName":"requirements","slug":"/requirements/features-and-requirements","permalink":"/project-002-aac-api/docs/requirements/features-and-requirements","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-002-aac-api/edit/main/documentation/docs/requirements/features-and-requirements.md","tags":[],"version":"current","lastUpdatedBy":"TheBigMo","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"General Requirements","permalink":"/project-002-aac-api/docs/requirements/general-requirements"},"next":{"title":"Use-case descriptions","permalink":"/project-002-aac-api/docs/requirements/use-case-descriptions"}}');var r=n(74848),s=n(28453);const o={sidebar_position:4},a="Features and Requirements",u={},c=[{value:"Functional Requirements",id:"functional-requirements",level:2},{value:"Non-Functional Requirements",id:"non-functional-requirements",level:2}];function l(e){const t={h1:"h1",h2:"h2",header:"header",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"features-and-requirements",children:"Features and Requirements"})}),"\n",(0,r.jsx)(t.h2,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"API must take in preset audio input options it is expecting"}),(0,r.jsx)("li",{children:"API must connect to, activate, and record audio from microphone"}),(0,r.jsx)("li",{children:"API must connect to speech-to-text database (either internal or external)"}),(0,r.jsx)("li",{children:"API must translate recorded audio into text"}),(0,r.jsx)("li",{children:"API must compare translated audio input to input options and record if it is included in the list, and which one if it is"}),(0,r.jsx)("li",{children:"API must return comparison results"}),(0,r.jsx)("li",{children:"API must be compatible with any suitable AAC device"})]}),"\n",(0,r.jsx)(t.h2,{id:"non-functional-requirements",children:"Non-Functional Requirements"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"API should respond quickly to inputs so users don\u2019t feel lag"}),(0,r.jsx)("li",{children:"API should be flexible enough to support new AAC devices in the future"}),(0,r.jsx)("li",{children:"API should be able to handle multiple developer requests at once"}),(0,r.jsx)("li",{children:"API should be able to process concurrent audio inputs"}),(0,r.jsx)("li",{children:"API should give feedback so users know their action was received"}),(0,r.jsx)("li",{children:"API should have flexibility for future use-cases"}),(0,r.jsx)("li",{children:"API should keep data secure"})]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);